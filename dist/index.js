"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const tough_cookie_1 = require("tough-cookie");
const requestInit = {
    cache: 'no-store',
    // Currently node-fetch doesn't support this, it's a problem when page is redirected but cookies set by the page
    // are required. A workaround is setting redirect to 'manual' so that web-walk can catch cookies.
    credentials: 'include',
    mode: 'cors',
    redirect: 'follow',
    headers: {
        'accept': '*/*',
        'accept-encoding': 'gzip,deflate,br',
        'connection': 'close',
        'user-agent': `web-walk/${require('../package.json').version}`,
    }
};
const getCookieHeader = (siteCookies, mandatoryCookies) => {
    let override = Object.keys(mandatoryCookies)
        .map(key => new tough_cookie_1.Cookie({ key, value: mandatoryCookies[key] }).cookieString())
        .join(';');
    return [siteCookies, override].filter(v => !!v).join(';');
};
const getFormData = (formDataPairs) => {
    const keys = Object.keys(formDataPairs);
    if (!keys.length)
        return;
    return keys
        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formDataPairs[key]))
        .join('&');
};
const injectCookieHeader = (headers, cookieHeader) => {
    let mergedCookieHeader = [headers['cookie'], cookieHeader]
        .filter(v => !!v)
        .map(v => v.trim())
        .join(';');
    if (!!mergedCookieHeader) {
        headers = Object.assign({}, headers, { 'cookie': mergedCookieHeader });
    }
    return headers;
};
const transformHeaders = (headers) => {
    let pairs = {};
    headers.forEach((value, key) => {
        let lower = key.toLowerCase();
        if ('set-cookie' !== lower) {
            pairs[lower] = value;
        }
    });
    return pairs;
};
const extractCookies = (setCookies) => {
    let pairs = {};
    let raw = [];
    if (setCookies && setCookies.length) {
        setCookies.forEach(line => {
            let parsed = tough_cookie_1.Cookie.parse(line);
            Object.assign(pairs, { [parsed.key]: parsed.value });
            raw.push({
                key: parsed.key,
                value: parsed.value,
                expires: parsed.expires,
                maxAge: parsed.maxAge,
                domain: parsed.domain,
                path: parsed.path,
                secure: parsed.secure,
                httpOnly: parsed.httpOnly
            });
        });
    }
    return {
        cookies: pairs,
        rawCookies: raw
    };
};
const mergeHeaders = (...headersArgs) => {
    let flattened = Object.assign.apply(Object, [{}].concat(headersArgs));
    let merged = {};
    Object.keys(flattened).forEach(key => merged[key.toLowerCase()] = flattened[key]);
    return merged;
};
const prepare = (step, stepResponses) => __awaiter(this, void 0, void 0, function* () {
    const lastStepResponse = stepResponses.length ? stepResponses[stepResponses.length - 1] : undefined;
    return step.prepare ? step.prepare(lastStepResponse, stepResponses) : {};
});
const process = (step, stepResponse, stepResponses) => __awaiter(this, void 0, void 0, function* () {
    return step.process ? step.process(stepResponse, stepResponses) : stepResponse.text;
});
/**
 * Generate request
 * @param config
 * @param step
 * @param responses
 */
const getRequest = (config, step, prepared, siteCookies) => {
    if (!step.request) {
        step.request = {};
    }
    let headers = mergeHeaders(requestInit.headers, config.headers, step.request.headers, prepared.headers);
    let cookies = getCookieHeader(siteCookies, Object.assign({}, config.cookies, step.request.cookies, prepared.cookies));
    let formData = getFormData(Object.assign({}, step.request.formData, prepared.formData));
    let request = Object.assign({}, requestInit, step.request, prepared);
    request.headers = injectCookieHeader(headers, cookies);
    if (!request.body && formData) {
        request.body = formData;
        if (!request.headers['content-type']) {
            request.headers['content-type'] = 'application/x-www-form-urlencoded';
        }
    }
    if (!request.method && request.body) {
        request.method = 'POST';
    }
    delete request.cookies;
    delete request.formData;
    return request;
};
exports.walk = (config) => __awaiter(this, void 0, void 0, function* () {
    if (!config || !config.steps)
        return;
    let stepResponses = [];
    let stepResponse;
    let cookieJar = new tough_cookie_1.CookieJar();
    for (let i = 0; i < config.steps.length; ++i) {
        const step = config.steps[i];
        const prepared = yield prepare(step, stepResponses);
        const url = prepared.url || step.url;
        const siteCookies = cookieJar.getCookieStringSync(url);
        const request = getRequest(config, step, prepared, siteCookies);
        const response = yield node_fetch_1.default(url, request);
        const setCookieHeaders = response.headers.raw()['set-cookie'] || [];
        stepResponse = Object.assign({ status: response.status, headers: transformHeaders(response.headers) }, extractCookies(setCookieHeaders), { text: yield response.text() });
        stepResponse.output = yield process(step, stepResponse, stepResponses);
        stepResponses.push(stepResponse);
        setCookieHeaders.forEach(line => cookieJar.setCookieSync(line, response.url));
    }
    return stepResponse.output;
});
//# sourceMappingURL=data:application/json;base64,